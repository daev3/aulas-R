print(1)
1
sessionInfo()
print("Olá mundo")
x <- 1:20
x
y = 3:12
y
y = 3:12:2
y = 3:12
y = 3:12:2
clear
plot(x)
plot([1,3,10])
plot(1,3,10)
y
type(y)
typeof(y)
typeof(x)
plot(1:29)
y
x <- 3 4 5 10 2 1
x <- [1,2,3,6,2,1]
x = [1,2,3,6,2,1]
ve1 = 1:13
ve1[4] <- 30
sort(ve1)
ve1 = sort(ve1)
vetor1 = seq(1, 15, by = 3)
vetor2 = 4:8
print(vetor1 + vetor2)
vetor2 = 4:9
print(vetor1 + vetor2)
sq1 = seq(0, 100, by = 7)
sq1 = seq(0, 100, by = 7)
for q in sq1:
print(q)
sq1 = seq(0, 100, by = 7)
print(sq1)
sq1 = seq(0, 100, by = 6)
print(sq1)
sq1 = seq(0, 100, by = 100/15)
print(sq1)
sq1 = seq(0, 100, by = 100/14)
print(sq1)
sq2 = sq1[c(-5, -10)]
print(sq2)
# Uma sequência de quinze valores em intervalos regulares, indo de 0 a 100, nomeada sq1;
sq1 = seq(0, 100, by = 7)
print(sq1)
# Um objeto, denominado sq2, que contenha todos os elementos de sq1, exceto o quinto e décimo valores;
sq2 = sq1[c(-5, -10)]
print(sq2)
# Um vetor sq3 contendo apenas as posições ímpares do objeto sq1;
sq3 = sq1[c()]
# Um vetor sq3 contendo apenas as posições ímpares do objeto sq1;
sq3 = sq1[c(3,5,7,9,11,13,15)]
print(sq3)
# Um vetor sq3 contendo apenas as posições ímpares do objeto sq1;
sq3 = sq1[c(2,4,6,8,10,12,14)]
print(sq3)
# Uma sequência igual a sq1 substituindo, apenas os valores nas posições pares, pelo número relativo à sua posição. Denomine esse objeto de sq4.
sq4 = sq1
sq4[1] <- 1
print(sq4)
sq4[3] =  3
print(sq4)
sq4[3] <-  3
# Uma sequência igual a sq1 substituindo, apenas os valores nas posições pares, pelo número relativo à sua posição. Denomine esse objeto de sq4.
sq4 = sq1
sq4[1] <- 1
sq4[3] <-  3
sq4[5] <-  5
sq4[7] <-  7
sq4[9] <-  9
sq4[11] <-  11
sq4[13] <-  13
sq4[15] <-  15
print(sq4)
l1 = list(nome= "David", idade = 30, programador=TRUE)
nve = unlist(l1)
print(nve)
print(nve[1])
print(nve[2])
rivers
data(rivers)
rivers
print(rivers_data)
rivers_data = data(rivers)
rivers_data = data(rivers)
print(rivers_data)
print(rivers)
mean(rivers
)
print(rivers_df)
rivers_df = data.frame(rivers)
print(rivers_df)
summary(rivers_df)
mm <= rivers_df.filter(rivers < 591.2)
my_data %>% filter(rivers < 591.2)
my_data <- as_tibble(rivers_df)
my_data %>% filter(rivers < 591.2)
print(mm)
my_data <- as_tibble(rivers_df)
filter(rivers < mean(rivers_df))
filter(rivers < mean(rivers_df))
filter(rivers_df$rivers < mean(rivers_df))
filter(rivers_df$rivers < mean(rivers_df))
filter(rivers_df, rivers < mean(rivers_df))
filter(rivers_df)
filter(rivers_df, rivers < mean(rivers_df$rivers))
filter(rivers_df, rivers_df$rivers < mean(rivers_df$rivers))
filter(rivers_df, rivers < 1000)
filter(rivers_df, rivers_df$rivers < 1000)
mm = rivers_df[rivers_df$rivers < mean(rivers_df$rivers),]
print(mm)
mean(rivers_df$rivers)
summary(rivers_df)
quartile(rivers_df$rivers, .75)
quantile(rivers_df$rivers, .75)
quantile(rivers_df$rivers, .74)
quantile(rivers_df$rivers, .75)
# 2
75 = quantile(rivers_df$rivers, .75)
print(75)
print(unname(result))
# 2
75 = quantile(rivers_df$rivers, .75)
# 2
75 = quantile(rivers_df$rivers, .75)
print(unname(75))
# 2
a75 = quantile(rivers_df$rivers, .75)
print(unname(a75))
# 2
value75 = quantile(rivers_df$rivers, .75)
print(unname(value75))
# 3
medias <- c(
mean(rivers_df$rivers),
median(rivers_df$rivers)
)
print(medias)
# 3
medias <- c(
mean(rivers_df$rivers),
median(rivers_df$rivers),
mode(rivers_df$rivers)
)
print(medias)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
print(Mode(rivers_df$rivers))
medias <- c(
mean(rivers_df$rivers),
median(rivers_df$rivers),
Mode(rivers_df$rivers)
)
print(medias)
install.packages("ggplot2")
